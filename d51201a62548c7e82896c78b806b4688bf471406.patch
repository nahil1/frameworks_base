From d51201a62548c7e82896c78b806b4688bf471406 Mon Sep 17 00:00:00 2001
From: beanstown106 <nbenis106@gmail.com>
Date: Thu, 7 Sep 2017 21:49:11 +0200
Subject: [PATCH] Repurpose SystemUI tuner for BenzoExtras [1/2]

BenzoEdit:
-Alphabetize statusbar tuner stuff
-Adapted for current benzo code
-Fixed for 8.1

ezio84:
- adapt to new Oreo code
- use a specific activity also for statusbar icons
- clean up useless tuner code

Change-Id: I3ca5a122270cf094970b47656c9e6af0f8d00ddc
Signed-off-by: mydongistiny <jaysonedson@gmail.com>
---
 packages/SystemUI/AndroidManifest.xml         |  47 +++--
 .../SystemUI/res/layout/qs_footer_impl.xml    |  34 +---
 .../SystemUI/res/values/custom_strings.xml    |   6 +
 packages/SystemUI/res/values/styles.xml       |   1 -
 .../res/xml/statusbar_icon_settings.xml       |  82 ++++++++
 packages/SystemUI/res/xml/tuner_prefs.xml     | 127 -------------
 .../com/android/systemui/qs/QSFooterImpl.java |  30 +--
 .../statusbar/phone/SettingsButton.java       | 176 ------------------
 .../systemui/tuner/LockscreenFragment.java    |   8 +
 .../tuner/LockscreenTunerActivity.java        |  41 ++++
 .../systemui/tuner/NavBarTunerActivity.java   |  41 ++++
 .../PowerNotificationControlsFragment.java    |   8 +-
 .../PowerNotificationsTunerActivity.java      |  41 ++++
 .../tuner/StatusBarIconsTunerActivity.java    |  44 +++++
 .../tuner/StatusbarIconsFragment.java         |  51 +++++
 .../android/systemui/tuner/TunerFragment.java |  65 -------
 .../android/systemui/tuner/TunerService.java  |  50 -----
 .../systemui/tuner/TunerServiceImpl.java      |  10 +-
 18 files changed, 369 insertions(+), 493 deletions(-)
 create mode 100644 packages/SystemUI/res/xml/statusbar_icon_settings.xml
 delete mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/phone/SettingsButton.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/tuner/LockscreenTunerActivity.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/tuner/NavBarTunerActivity.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/tuner/PowerNotificationsTunerActivity.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/tuner/StatusBarIconsTunerActivity.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/tuner/StatusbarIconsFragment.java

diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index f6c1d592b4d..29e4e132ed1 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -296,20 +296,45 @@
                 android:exported="true" />
 
         <activity android:name=".tuner.TunerActivity"
-                  android:enabled="false"
                   android:icon="@drawable/tuner"
                   android:theme="@style/TunerSettings"
                   android:label="@string/system_ui_tuner"
                   android:process=":tuner"
+                  android:parentActivityName="com.benzo.settings.BenzoSettings"
+                  android:exported="true">
+        </activity>
+
+        <activity android:name=".tuner.StatusBarIconsTunerActivity"
+                  android:icon="@drawable/tuner"
+                  android:theme="@style/TunerSettings"
+                  android:label="@string/statusbar_icons_blacklist"
+                  android:process=":tuner"
+                  android:parentActivityName="com.benzo.settings.StatusbarSettings"
+                  android:exported="true">
+        </activity>
+
+        <activity android:name=".tuner.NavBarTunerActivity"
+                  android:theme="@style/TunerSettings"
+                  android:label="@string/navbar_tuner_activity"
+                  android:process=":tuner"
+                  android:parentActivityName="com.benzo.settings.NavbarSettings"
+                  android:exported="true">
+        </activity>
+
+        <activity android:name=".tuner.LockscreenTunerActivity"
+                  android:theme="@style/TunerSettings"
+                  android:label="@string/lockscreen_tuner_activity"
+                  android:process=":tuner"
+                  android:parentActivityName="com.benzo.settings.LockScreenSettings"
+                  android:exported="true">
+        </activity>
+
+        <activity android:name=".tuner.PowerNotificationsTunerActivity"
+                  android:theme="@style/TunerSettings"
+                  android:label="@string/powernotif_tuner_activity"
+                  android:process=":tuner"
+                  android:parentActivityName="com.benzo.settings.PowerNotificationsSettings"
                   android:exported="true">
-            <intent-filter>
-                <action android:name="com.android.settings.action.EXTRA_SETTINGS" />
-                <category android:name="android.intent.category.DEFAULT" />
-            </intent-filter>
-            <meta-data android:name="com.android.settings.category"
-                    android:value="com.android.settings.category.ia.system" />
-            <meta-data android:name="com.android.settings.summary"
-                    android:resource="@string/summary_empty"/>
         </activity>
 
         <activity-alias android:name=".DemoMode"
@@ -602,13 +627,13 @@
             android:singleUser="true"
             android:permission="android.permission.BIND_DREAM_SERVICE" />
 
-        <receiver
+        <!--<receiver
             android:name=".tuner.TunerService$ClearReceiver"
             android:exported="false">
             <intent-filter>
                 <action android:name="com.android.systemui.action.CLEAR_TUNER" />
             </intent-filter>
-        </receiver>
+        </receiver>-->
 
         <provider
             android:name="android.support.v4.content.FileProvider"
diff --git a/packages/SystemUI/res/layout/qs_footer_impl.xml b/packages/SystemUI/res/layout/qs_footer_impl.xml
index f554150ab0d..3ac12332785 100644
--- a/packages/SystemUI/res/layout/qs_footer_impl.xml
+++ b/packages/SystemUI/res/layout/qs_footer_impl.xml
@@ -111,35 +111,15 @@
                 android:src="@drawable/ic_mode_edit"
                 android:tint="?android:attr/colorForeground"/>
 
-            <com.android.systemui.statusbar.AlphaOptimizedFrameLayout
-                android:id="@+id/settings_button_container"
+            <com.android.keyguard.AlphaOptimizedImageButton
+                android:id="@+id/settings_button"
+                style="@android:style/Widget.Material.Button.Borderless"
                 android:layout_width="48dp"
                 android:layout_height="48dp"
-                android:clipChildren="false"
-                android:clipToPadding="false">
-
-                <com.android.systemui.statusbar.phone.SettingsButton
-                    android:id="@+id/settings_button"
-                    style="@android:style/Widget.Material.Button.Borderless"
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:background="@drawable/ripple_drawable"
-                    android:contentDescription="@string/accessibility_quick_settings_settings"
-                    android:padding="15dp"
-                    android:src="@drawable/ic_settings_16dp"
-                    android:tint="?android:attr/colorForeground"/>
-
-                <com.android.systemui.statusbar.AlphaOptimizedImageView
-                    android:id="@+id/tuner_icon"
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:paddingStart="36dp"
-                    android:paddingEnd="4dp"
-                    android:src="@drawable/tuner"
-                    android:tint="?android:attr/textColorTertiary"
-                    android:visibility="invisible"/>
-
-            </com.android.systemui.statusbar.AlphaOptimizedFrameLayout>
+                android:background="@drawable/ripple_drawable"
+                android:src="@drawable/ic_settings_16dp"
+                android:tint="?android:attr/colorForeground"
+                android:contentDescription="@string/accessibility_quick_settings_settings" />
         </com.android.keyguard.AlphaOptimizedLinearLayout>
     </LinearLayout>
 
diff --git a/packages/SystemUI/res/values/custom_strings.xml b/packages/SystemUI/res/values/custom_strings.xml
index 2a27fca5264..9f4be3c1332 100644
--- a/packages/SystemUI/res/values/custom_strings.xml
+++ b/packages/SystemUI/res/values/custom_strings.xml
@@ -105,4 +105,10 @@
     <string name="menu_ime_always_show">Menu / Keyboard Switcher (always show)</string>
     <string name="search">Search</string>
 
+    <!-- SysUI Tuner -->
+    <string name="statusbar_icons_blacklist">Status bar icons</string>
+    <string name="navbar_tuner_activity">Navigation bar buttons</string>
+    <string name="lockscreen_tuner_activity">Lockscreen shortcuts</string>
+    <string name="powernotif_tuner_activity">Power notifications</string>
+
 </resources>
diff --git a/packages/SystemUI/res/values/styles.xml b/packages/SystemUI/res/values/styles.xml
index e4f59892f79..445c9887d4f 100644
--- a/packages/SystemUI/res/values/styles.xml
+++ b/packages/SystemUI/res/values/styles.xml
@@ -443,7 +443,6 @@
     </style>
 
     <style name="TunerSettings" parent="@android:style/Theme.DeviceDefault.Settings">
-        <item name="android:windowActionBar">false</item>
         <item name="preferenceTheme">@style/TunerPreferenceTheme</item>
     </style>
 
diff --git a/packages/SystemUI/res/xml/statusbar_icon_settings.xml b/packages/SystemUI/res/xml/statusbar_icon_settings.xml
new file mode 100644
index 00000000000..2099c6137c0
--- /dev/null
+++ b/packages/SystemUI/res/xml/statusbar_icon_settings.xml
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2015 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:sysui="http://schemas.android.com/apk/res-auto"
+    android:title="@string/statusbar_icons_blacklist">
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="airplane"
+            android:title="@string/status_bar_airplane" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="alarm_clock"
+            android:title="@string/status_bar_alarm" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="rotate"
+            android:title="@string/status_bar_settings_auto_rotation" />
+
+        <com.android.systemui.tuner.BatteryPreference
+            android:title="@string/battery"
+            android:summary="%s"
+            android:entries="@array/battery_options" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="bluetooth"
+            android:title="@string/quick_settings_bluetooth_label" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="cast"
+            android:title="@string/quick_settings_cast_title" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="zen"
+            android:title="@string/quick_settings_dnd_label" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="ethernet"
+            android:title="@string/status_bar_ethernet" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="headset"
+            android:title="@string/headset" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="hotspot"
+            android:title="@string/quick_settings_hotspot_label" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="mobile"
+            android:title="@string/quick_settings_cellular_detail_title" />
+
+        <com.android.systemui.tuner.ClockPreference
+            android:title="@string/tuner_time"
+            android:summary="%s"
+            android:entries="@array/clock_options" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="volume"
+            android:title="@*android:string/volume_unknown" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="wifi"
+            android:title="@string/quick_settings_wifi_label" />
+
+        <com.android.systemui.tuner.StatusBarSwitch
+            android:key="managed_profile"
+            android:title="@string/status_bar_work" />
+
+</PreferenceScreen>
diff --git a/packages/SystemUI/res/xml/tuner_prefs.xml b/packages/SystemUI/res/xml/tuner_prefs.xml
index 46ea4949512..c1ea0564065 100644
--- a/packages/SystemUI/res/xml/tuner_prefs.xml
+++ b/packages/SystemUI/res/xml/tuner_prefs.xml
@@ -18,131 +18,4 @@
     xmlns:sysui="http://schemas.android.com/apk/res-auto"
     android:title="@string/system_ui_tuner">
 
-    <PreferenceScreen
-        android:key="status_bar"
-        android:title="@string/status_bar" >
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="rotate"
-            android:title="@string/status_bar_settings_auto_rotation" />
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="headset"
-            android:title="@string/headset" />
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="managed_profile"
-            android:title="@string/status_bar_work" />
-
-        <!-- ime -->
-        <!-- sync_failing -->
-        <!-- sync_active -->
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="cast"
-            android:title="@string/quick_settings_cast_title" />
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="hotspot"
-            android:title="@string/quick_settings_hotspot_label" />
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="bluetooth"
-            android:title="@string/quick_settings_bluetooth_label" />
-
-        <!-- nfc -->
-        <!-- tty -->
-        <!-- speakerphone -->
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="zen"
-            android:title="@string/quick_settings_dnd_label" />
-
-        <!-- mute -->
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="volume"
-            android:title="@*android:string/volume_unknown" />
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="wifi"
-            android:title="@string/quick_settings_wifi_label" />
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="ethernet"
-            android:title="@string/status_bar_ethernet" />
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="mobile"
-            android:title="@string/quick_settings_cellular_detail_title" />
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="airplane"
-            android:title="@string/status_bar_airplane" />
-
-        <!-- other weird signal stuff -->
-
-        <com.android.systemui.tuner.BatteryPreference
-            android:title="@string/battery"
-            android:summary="%s"
-            android:entries="@array/battery_options" />
-
-        <com.android.systemui.tuner.StatusBarSwitch
-            android:key="alarm_clock"
-            android:title="@string/status_bar_alarm" />
-
-        <!-- secure -->
-
-        <com.android.systemui.tuner.ClockPreference
-            android:title="@string/tuner_time"
-            android:summary="%s"
-            android:entries="@array/clock_options" />
-
-    </PreferenceScreen>
-
-    <PreferenceScreen
-        android:key="volume_and_do_not_disturb"
-        android:title="@string/volume_and_do_not_disturb">
-
-        <!-- Action for this is
-             MetricsConstants.ACTION_TUNER_DO_NOT_DISTURB_VOLUME_SHORTCUT -->
-        <com.android.systemui.tuner.TunerSwitch
-            android:key="sysui_volume_down_silent,sysui_volume_up_silent"
-            android:title="@string/volume_dnd_silent"
-            sysui:defValue="true"
-            sysui:metricsAction="315" />
-
-    </PreferenceScreen>
-
-    <PreferenceScreen
-      android:key="doze"
-      android:title="@string/tuner_doze">
-
-        <com.android.systemui.tuner.TunerSwitch
-          android:key="doze_always_on"
-          android:title="@string/tuner_doze_always_on"
-          sysui:defValue="true" />
-
-    </PreferenceScreen>
-
-    <Preference
-        android:key="nav_bar"
-        android:title="@string/nav_bar"
-        android:fragment="com.android.systemui.tuner.NavBarTuner" />
-
-    <Preference
-            android:key="lockscreen"
-            android:title="@string/tuner_lock_screen"
-            android:fragment="com.android.systemui.tuner.LockscreenFragment" />
-
-    <Preference
-            android:key="plugins"
-            android:title="@string/plugins"
-            android:fragment="com.android.systemui.tuner.PluginFragment" />
-
-    <!-- Warning, this goes last. -->
-    <Preference
-        android:summary="@string/tuner_persistent_warning"
-        android:selectable="false" />
-
 </PreferenceScreen>
diff --git a/packages/SystemUI/src/com/android/systemui/qs/QSFooterImpl.java b/packages/SystemUI/src/com/android/systemui/qs/QSFooterImpl.java
index b3cdd2fde1b..e3d5f659514 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/QSFooterImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/QSFooterImpl.java
@@ -55,14 +55,12 @@
 import com.android.systemui.plugins.ActivityStarter;
 import com.android.systemui.qs.TouchAnimator.Builder;
 import com.android.systemui.statusbar.phone.MultiUserSwitch;
-import com.android.systemui.statusbar.phone.SettingsButton;
 import com.android.systemui.statusbar.policy.DeviceProvisionedController;
 import com.android.systemui.statusbar.policy.NetworkController;
 import com.android.systemui.statusbar.policy.NetworkController.EmergencyListener;
 import com.android.systemui.statusbar.policy.NetworkController.SignalCallback;
 import com.android.systemui.statusbar.policy.UserInfoController;
 import com.android.systemui.statusbar.policy.UserInfoController.OnUserInfoChangedListener;
-import com.android.systemui.tuner.TunerService;
 
 public class QSFooterImpl extends FrameLayout implements QSFooter,
         OnClickListener,  OnLongClickListener, OnUserInfoChangedListener,
@@ -70,8 +68,7 @@
 
     private ActivityStarter mActivityStarter;
     private UserInfoController mUserInfoController;
-    private SettingsButton mSettingsButton;
-    protected View mSettingsContainer;
+    private View mSettingsButton;
     private PageIndicator mPageIndicator;
     private CarrierText mCarrierText;
 
@@ -120,7 +117,6 @@ protected void onFinishInflate() {
         mPageIndicator = findViewById(R.id.footer_page_indicator);
 
         mSettingsButton = findViewById(R.id.settings_button);
-        mSettingsContainer = findViewById(R.id.settings_button_container);
         mSettingsButton.setOnClickListener(this);
         mSettingsButton.setOnLongClickListener(this);
 
@@ -159,7 +155,7 @@ private void updateAnimator(int width) {
         int defSpace = mContext.getResources().getDimensionPixelOffset(R.dimen.default_gear_space);
 
         mSettingsCogAnimator = new Builder()
-                .addFloat(mSettingsContainer, "translationX",
+                .addFloat(mSettingsButton, "translationX",
                         isLayoutRtl() ? (remaining - defSpace) : -(remaining - defSpace), 0)
                 .addFloat(mSettingsButton, "rotation", -120, 0)
                 .build();
@@ -290,9 +286,6 @@ public void updateEverything() {
     }
 
     private void updateVisibilities() {
-        mSettingsContainer.setVisibility(mQsDisabled ? View.GONE : View.VISIBLE);
-        mSettingsContainer.findViewById(R.id.tuner_icon).setVisibility(
-                TunerService.isTunerEnabled(mContext) ? View.VISIBLE : View.INVISIBLE);
         final boolean isDemo = UserManager.isDeviceInDemoMode(mContext);
         mMultiUserSwitch.setVisibility(showUserSwitcher(isDemo) ? View.VISIBLE : View.INVISIBLE);
         mEdit.setVisibility(isDemo || !mExpanded ? View.INVISIBLE : View.VISIBLE);
@@ -358,24 +351,7 @@ public void onClick(View v) {
             MetricsLogger.action(mContext,
                     mExpanded ? MetricsProto.MetricsEvent.ACTION_QS_EXPANDED_SETTINGS_LAUNCH
                             : MetricsProto.MetricsEvent.ACTION_QS_COLLAPSED_SETTINGS_LAUNCH);
-            if (mSettingsButton.isTunerClick()) {
-                Dependency.get(ActivityStarter.class).postQSRunnableDismissingKeyguard(() -> {
-                    if (TunerService.isTunerEnabled(mContext)) {
-                        TunerService.showResetRequest(mContext, () -> {
-                            // Relaunch settings so that the tuner disappears.
-                            startSettingsActivity();
-                        });
-                    } else {
-                        Toast.makeText(getContext(), R.string.tuner_toast,
-                                Toast.LENGTH_LONG).show();
-                        TunerService.setTunerEnabled(mContext, true);
-                    }
-                    startSettingsActivity();
-
-                });
-            } else {
-                startSettingsActivity();
-            }
+            startSettingsActivity();
         }
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/SettingsButton.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/SettingsButton.java
deleted file mode 100644
index 1130b6de254..00000000000
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/SettingsButton.java
+++ /dev/null
@@ -1,176 +0,0 @@
-/*
- * Copyright (C) 2015 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.android.systemui.statusbar.phone;
-
-import android.animation.Animator;
-import android.animation.Animator.AnimatorListener;
-import android.animation.ObjectAnimator;
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.HapticFeedbackConstants;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewConfiguration;
-import android.view.animation.Animation;
-import android.view.animation.AnimationUtils;
-
-import com.android.keyguard.AlphaOptimizedImageButton;
-import com.android.systemui.Interpolators;
-
-public class SettingsButton extends AlphaOptimizedImageButton {
-
-    private static final boolean TUNER_ENABLE_AVAILABLE = false;
-
-    private static final long LONG_PRESS_LENGTH = 1000;
-    private static final long ACCEL_LENGTH = 750;
-    private static final long FULL_SPEED_LENGTH = 375;
-    private static final long RUN_DURATION = 350;
-
-    private boolean mUpToSpeed;
-    private ObjectAnimator mAnimator;
-
-    private float mSlop;
-
-    public SettingsButton(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        mSlop = ViewConfiguration.get(getContext()).getScaledTouchSlop();
-    }
-
-    public boolean isAnimating() {
-        return mAnimator != null && mAnimator.isRunning();
-    }
-
-    public boolean isTunerClick() {
-        return mUpToSpeed;
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        switch (event.getActionMasked()) {
-            case MotionEvent.ACTION_DOWN:
-                if (TUNER_ENABLE_AVAILABLE) postDelayed(mLongPressCallback, LONG_PRESS_LENGTH);
-                break;
-            case MotionEvent.ACTION_UP:
-                if (mUpToSpeed) {
-                    startExitAnimation();
-                } else {
-                    cancelLongClick();
-                }
-                break;
-            case MotionEvent.ACTION_CANCEL:
-                cancelLongClick();
-                break;
-            case MotionEvent.ACTION_MOVE:
-                float x = event.getX();
-                float y = event.getY();
-                if ((x < -mSlop) || (y < -mSlop) || (x > getWidth() + mSlop)
-                        || (y > getHeight() + mSlop)) {
-                    cancelLongClick();
-                }
-                break;
-        }
-        return super.onTouchEvent(event);
-    }
-
-    private void cancelLongClick() {
-        cancelAnimation();
-        mUpToSpeed = false;
-        removeCallbacks(mLongPressCallback);
-    }
-
-    private void cancelAnimation() {
-        if (mAnimator != null) {
-            mAnimator.removeAllListeners();
-            mAnimator.cancel();
-            mAnimator = null;
-        }
-    }
-
-    private void startExitAnimation() {
-        animate()
-                .translationX(((View) getParent().getParent()).getWidth() - getX())
-                .alpha(0)
-                .setDuration(RUN_DURATION)
-                .setInterpolator(AnimationUtils.loadInterpolator(mContext,
-                        android.R.interpolator.accelerate_cubic))
-                .setListener(new AnimatorListener() {
-                    @Override
-                    public void onAnimationStart(Animator animation) {
-                    }
-
-                    @Override
-                    public void onAnimationRepeat(Animator animation) {
-                    }
-
-                    @Override
-                    public void onAnimationEnd(Animator animation) {
-                        setAlpha(1f);
-                        setTranslationX(0);
-                        cancelLongClick();
-                    }
-
-                    @Override
-                    public void onAnimationCancel(Animator animation) {
-                    }
-                })
-                .start();
-    }
-
-    protected void startAccelSpin() {
-        cancelAnimation();
-        mAnimator = ObjectAnimator.ofFloat(this, View.ROTATION, 0, 360);
-        mAnimator.setInterpolator(AnimationUtils.loadInterpolator(mContext,
-                android.R.interpolator.accelerate_quad));
-        mAnimator.setDuration(ACCEL_LENGTH);
-        mAnimator.addListener(new AnimatorListener() {
-            @Override
-            public void onAnimationStart(Animator animation) {
-            }
-
-            @Override
-            public void onAnimationRepeat(Animator animation) {
-            }
-
-            @Override
-            public void onAnimationEnd(Animator animation) {
-                startContinuousSpin();
-            }
-
-            @Override
-            public void onAnimationCancel(Animator animation) {
-            }
-        });
-        mAnimator.start();
-    }
-
-    protected void startContinuousSpin() {
-        cancelAnimation();
-        performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
-        mUpToSpeed = true;
-        mAnimator = ObjectAnimator.ofFloat(this, View.ROTATION, 0, 360);
-        mAnimator.setInterpolator(Interpolators.LINEAR);
-        mAnimator.setDuration(FULL_SPEED_LENGTH);
-        mAnimator.setRepeatCount(Animation.INFINITE);
-        mAnimator.start();
-    }
-
-    private final Runnable mLongPressCallback = new Runnable() {
-        @Override
-        public void run() {
-            startAccelSpin();
-        }
-    };
-}
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/LockscreenFragment.java b/packages/SystemUI/src/com/android/systemui/tuner/LockscreenFragment.java
index 2df1793acb4..12e4b151720 100644
--- a/packages/SystemUI/src/com/android/systemui/tuner/LockscreenFragment.java
+++ b/packages/SystemUI/src/com/android/systemui/tuner/LockscreenFragment.java
@@ -14,6 +14,7 @@
 
 package com.android.systemui.tuner;
 
+import android.annotation.Nullable;
 import android.app.AlertDialog;
 import android.app.AlertDialog.Builder;
 import android.content.ComponentName;
@@ -84,6 +85,13 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         addPreferencesFromResource(R.xml.lockscreen_settings);
         setupGroup(LOCKSCREEN_LEFT_BUTTON, LOCKSCREEN_LEFT_UNLOCK);
         setupGroup(LOCKSCREEN_RIGHT_BUTTON, LOCKSCREEN_RIGHT_UNLOCK);
+
+    }
+
+    @Override
+    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        getActivity().getActionBar().setDisplayHomeAsUpEnabled(true);
     }
 
     @Override
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/LockscreenTunerActivity.java b/packages/SystemUI/src/com/android/systemui/tuner/LockscreenTunerActivity.java
new file mode 100644
index 00000000000..7b03e200a2c
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/tuner/LockscreenTunerActivity.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2017 ABC rom
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.tuner;
+
+import android.os.Bundle;
+import android.support.v14.preference.PreferenceFragment;
+
+import com.android.systemui.Dependency;
+import com.android.systemui.R;
+import com.android.systemui.tuner.TunerActivity;
+
+public class LockscreenTunerActivity extends TunerActivity {
+
+    private static final String TAG_TUNER = "tuner";
+
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Dependency.initDependencies(this);
+
+        if (getFragmentManager().findFragmentByTag(TAG_TUNER) == null) {
+            final String action = getIntent().getAction();
+            final PreferenceFragment fragment = new LockscreenFragment();
+            getFragmentManager().beginTransaction().replace(R.id.content_frame,
+                    fragment, TAG_TUNER).commit();
+        }
+    }
+}
+
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/NavBarTunerActivity.java b/packages/SystemUI/src/com/android/systemui/tuner/NavBarTunerActivity.java
new file mode 100644
index 00000000000..7e1bc64c1ab
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/tuner/NavBarTunerActivity.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2017 ABC rom
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.tuner;
+
+import android.os.Bundle;
+import android.support.v14.preference.PreferenceFragment;
+
+import com.android.systemui.Dependency;
+import com.android.systemui.R;
+import com.android.systemui.tuner.TunerActivity;
+
+public class NavBarTunerActivity extends TunerActivity {
+
+    private static final String TAG_TUNER = "tuner";
+
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Dependency.initDependencies(this);
+
+        if (getFragmentManager().findFragmentByTag(TAG_TUNER) == null) {
+            final String action = getIntent().getAction();
+            final PreferenceFragment fragment = new NavBarTuner();
+            getFragmentManager().beginTransaction().replace(R.id.content_frame,
+                    fragment, TAG_TUNER).commit();
+        }
+    }
+}
+
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/PowerNotificationControlsFragment.java b/packages/SystemUI/src/com/android/systemui/tuner/PowerNotificationControlsFragment.java
index 8740a3c2f45..e6e4798b573 100644
--- a/packages/SystemUI/src/com/android/systemui/tuner/PowerNotificationControlsFragment.java
+++ b/packages/SystemUI/src/com/android/systemui/tuner/PowerNotificationControlsFragment.java
@@ -44,6 +44,12 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         return inflater.inflate(R.layout.power_notification_controls_settings, container, false);
     }
 
+    @Override
+    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        getActivity().getActionBar().setDisplayHomeAsUpEnabled(true);
+    }
+
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
@@ -86,7 +92,7 @@ public void onPause() {
     }
 
     private boolean isEnabled() {
-        int setting = Settings.Secure.getInt(getContext().getContentResolver(), KEY_SHOW_PNC, 0);
+        int setting = Settings.Secure.getInt(getContext().getContentResolver(), KEY_SHOW_PNC, 1);
         return setting == 1;
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/PowerNotificationsTunerActivity.java b/packages/SystemUI/src/com/android/systemui/tuner/PowerNotificationsTunerActivity.java
new file mode 100644
index 00000000000..76f8f18159c
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/tuner/PowerNotificationsTunerActivity.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2017 ABC rom
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.tuner;
+
+import android.app.Fragment;
+import android.os.Bundle;
+
+import com.android.systemui.Dependency;
+import com.android.systemui.R;
+import com.android.systemui.tuner.TunerActivity;
+
+public class PowerNotificationsTunerActivity extends TunerActivity {
+
+    private static final String TAG_TUNER = "tuner";
+
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Dependency.initDependencies(this);
+
+        if (getFragmentManager().findFragmentByTag(TAG_TUNER) == null) {
+            final String action = getIntent().getAction();
+            final Fragment fragment = new PowerNotificationControlsFragment();
+            getFragmentManager().beginTransaction().replace(R.id.content_frame,
+                    fragment, TAG_TUNER).commit();
+        }
+    }
+}
+
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/StatusBarIconsTunerActivity.java b/packages/SystemUI/src/com/android/systemui/tuner/StatusBarIconsTunerActivity.java
new file mode 100644
index 00000000000..7e03a1ab8f7
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/tuner/StatusBarIconsTunerActivity.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2017 ABC rom
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.tuner;
+
+import android.os.Bundle;
+import android.support.v14.preference.PreferenceFragment;
+
+import com.android.systemui.Dependency;
+import com.android.systemui.R;
+import com.android.systemui.tuner.TunerActivity;
+
+public class StatusBarIconsTunerActivity extends TunerActivity {
+
+    private static final String TAG_TUNER = "tuner";
+
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Dependency.initDependencies(this);
+
+        if (getFragmentManager().findFragmentByTag(TAG_TUNER) == null) {
+            final String action = getIntent().getAction();
+            boolean showDemoMode = action != null && action.equals(
+                    "com.android.settings.action.DEMO_MODE");
+            final PreferenceFragment fragment = showDemoMode ? new DemoModeFragment()
+                    : new StatusbarIconsFragment();
+            getFragmentManager().beginTransaction().replace(R.id.content_frame,
+                    fragment, TAG_TUNER).commit();
+        }
+    }
+}
+
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/StatusbarIconsFragment.java b/packages/SystemUI/src/com/android/systemui/tuner/StatusbarIconsFragment.java
new file mode 100644
index 00000000000..ca8303db15d
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/tuner/StatusbarIconsFragment.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.tuner;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.DialogFragment;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.support.v14.preference.PreferenceFragment;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+
+import com.android.internal.hardware.AmbientDisplayConfiguration;
+import com.android.internal.logging.MetricsLogger;
+import com.android.internal.logging.nano.MetricsProto.MetricsEvent;
+import com.android.systemui.R;
+import com.android.systemui.plugins.PluginPrefs;
+
+public class StatusbarIconsFragment extends TunerFragment {
+
+    private static final String TAG = "StatusbarIconsFragment";
+
+    @Override
+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
+        addPreferencesFromResource(R.xml.statusbar_icon_settings);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        getActivity().setTitle(R.string.statusbar_icons_blacklist);
+
+        MetricsLogger.visibility(getContext(), MetricsEvent.TUNER, true);
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/TunerFragment.java b/packages/SystemUI/src/com/android/systemui/tuner/TunerFragment.java
index df2be489b88..c8df55ced5d 100644
--- a/packages/SystemUI/src/com/android/systemui/tuner/TunerFragment.java
+++ b/packages/SystemUI/src/com/android/systemui/tuner/TunerFragment.java
@@ -38,21 +38,6 @@
 
     private static final String TAG = "TunerFragment";
 
-    private static final String KEY_BATTERY_PCT = "battery_pct";
-    private static final String KEY_PLUGINS = "plugins";
-    private static final CharSequence KEY_DOZE = "doze";
-
-    public static final String SETTING_SEEN_TUNER_WARNING = "seen_tuner_warning";
-
-    private static final String WARNING_TAG = "tuner_warning";
-    private static final String[] DEBUG_ONLY = new String[] {
-            "nav_bar",
-            "lockscreen",
-            "picture_in_picture",
-    };
-
-    private static final int MENU_REMOVE = Menu.FIRST + 1;
-
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -69,29 +54,6 @@ public void onActivityCreated(Bundle savedInstanceState) {
     @Override
     public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         addPreferencesFromResource(R.xml.tuner_prefs);
-        if (!PluginPrefs.hasPlugins(getContext())) {
-            getPreferenceScreen().removePreference(findPreference(KEY_PLUGINS));
-        }
-        if (!alwaysOnAvailable()) {
-            getPreferenceScreen().removePreference(findPreference(KEY_DOZE));
-        }
-        if (!Build.IS_DEBUGGABLE) {
-            for (int i = 0; i < DEBUG_ONLY.length; i++) {
-                Preference preference = findPreference(DEBUG_ONLY[i]);
-                if (preference != null) getPreferenceScreen().removePreference(preference);
-            }
-        }
-
-        if (Settings.Secure.getInt(getContext().getContentResolver(), SETTING_SEEN_TUNER_WARNING,
-                0) == 0) {
-            if (getFragmentManager().findFragmentByTag(WARNING_TAG) == null) {
-                new TunerWarningFragment().show(getFragmentManager(), WARNING_TAG);
-            }
-        }
-    }
-
-    private boolean alwaysOnAvailable() {
-        return new AmbientDisplayConfiguration(getContext()).alwaysOnAvailable();
     }
 
     @Override
@@ -111,7 +73,6 @@ public void onPause() {
 
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        menu.add(Menu.NONE, MENU_REMOVE, Menu.NONE, R.string.remove_from_settings);
     }
 
     @Override
@@ -120,33 +81,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
             case android.R.id.home:
                 getActivity().finish();
                 return true;
-            case MENU_REMOVE:
-                TunerService.showResetRequest(getContext(), new Runnable() {
-                    @Override
-                    public void run() {
-                        if (getActivity() != null) {
-                            getActivity().finish();
-                        }
-                    }
-                });
-                return true;
         }
         return super.onOptionsItemSelected(item);
     }
-
-    public static class TunerWarningFragment extends DialogFragment {
-        @Override
-        public Dialog onCreateDialog(Bundle savedInstanceState) {
-            return new AlertDialog.Builder(getContext())
-                    .setTitle(R.string.tuner_warning_title)
-                    .setMessage(R.string.tuner_warning)
-                    .setPositiveButton(R.string.got_it, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            Settings.Secure.putInt(getContext().getContentResolver(),
-                                    SETTING_SEEN_TUNER_WARNING, 1);
-                        }
-                    }).show();
-        }
-    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/TunerService.java b/packages/SystemUI/src/com/android/systemui/tuner/TunerService.java
index 3a9d1c7caeb..373ba28ac06 100644
--- a/packages/SystemUI/src/com/android/systemui/tuner/TunerService.java
+++ b/packages/SystemUI/src/com/android/systemui/tuner/TunerService.java
@@ -34,8 +34,6 @@
 
 public abstract class TunerService {
 
-    public static final String ACTION_CLEAR = "com.android.systemui.action.CLEAR_TUNER";
-
     public abstract void clearAll();
     public abstract void destroy();
 
@@ -61,52 +59,4 @@ private static Context userContext(Context context) {
             return context;
         }
     }
-
-    public static final void setTunerEnabled(Context context, boolean enabled) {
-        userContext(context).getPackageManager().setComponentEnabledSetting(
-                new ComponentName(context, TunerActivity.class),
-                enabled ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED
-                        : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,
-                PackageManager.DONT_KILL_APP);
-    }
-
-    public static final boolean isTunerEnabled(Context context) {
-        return userContext(context).getPackageManager().getComponentEnabledSetting(
-                new ComponentName(context, TunerActivity.class))
-                == PackageManager.COMPONENT_ENABLED_STATE_ENABLED;
-    }
-
-    public static class ClearReceiver extends BroadcastReceiver {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (ACTION_CLEAR.equals(intent.getAction())) {
-                Dependency.get(TunerService.class).clearAll();
-            }
-        }
-    }
-
-    public static final void showResetRequest(final Context context, final Runnable onDisabled) {
-        SystemUIDialog dialog = new SystemUIDialog(context);
-        dialog.setShowForAllUsers(true);
-        dialog.setMessage(R.string.remove_from_settings_prompt);
-        dialog.setButton(DialogInterface.BUTTON_NEGATIVE, context.getString(R.string.cancel),
-                (OnClickListener) null);
-        dialog.setButton(DialogInterface.BUTTON_POSITIVE,
-                context.getString(R.string.guest_exit_guest_dialog_remove), new OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                // Tell the tuner (in main SysUI process) to clear all its settings.
-                context.sendBroadcast(new Intent(TunerService.ACTION_CLEAR));
-                // Disable access to tuner.
-                TunerService.setTunerEnabled(context, false);
-                // Make them sit through the warning dialog again.
-                Settings.Secure.putInt(context.getContentResolver(),
-                        TunerFragment.SETTING_SEEN_TUNER_WARNING, 0);
-                if (onDisabled != null) {
-                    onDisabled.run();
-                }
-            }
-        });
-        dialog.show();
-    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/TunerServiceImpl.java b/packages/SystemUI/src/com/android/systemui/tuner/TunerServiceImpl.java
index de61906f2c1..eaef2f13e98 100644
--- a/packages/SystemUI/src/com/android/systemui/tuner/TunerServiceImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/tuner/TunerServiceImpl.java
@@ -169,7 +169,7 @@ private void addTunable(Tunable tunable, String key) {
         Uri uri = Settings.Secure.getUriFor(key);
         if (!mListeningUris.containsKey(uri)) {
             mListeningUris.put(uri, key);
-            mContentResolver.registerContentObserver(uri, false, mObserver, mCurrentUser);
+            mContentResolver.registerContentObserver(uri, true, mObserver, mCurrentUser);
         }
         // Send the first state.
         String value = Settings.Secure.getStringForUser(mContentResolver, key, mCurrentUser);
@@ -192,7 +192,7 @@ protected void reregisterAll() {
         }
         mContentResolver.unregisterContentObserver(mObserver);
         for (Uri uri : mListeningUris.keySet()) {
-            mContentResolver.registerContentObserver(uri, false, mObserver, mCurrentUser);
+            mContentResolver.registerContentObserver(uri, true, mObserver, mCurrentUser);
         }
     }
 
@@ -220,12 +220,6 @@ private void reloadAll() {
 
     @Override
     public void clearAll() {
-        // A couple special cases.
-        Settings.Global.putString(mContentResolver, DemoMode.DEMO_MODE_ALLOWED, null);
-        Intent intent = new Intent(DemoMode.ACTION_DEMO);
-        intent.putExtra(DemoMode.EXTRA_COMMAND, DemoMode.COMMAND_EXIT);
-        mContext.sendBroadcast(intent);
-
         for (String key : mTunableLookup.keySet()) {
             Settings.Secure.putString(mContentResolver, key, null);
         }
